cdapython/Paginator.py:    def __init__(	cdapython/Paginator.py:        print("ran Paginator.py __init__")
cdapython/Paginator.py:    def _return_result(self) -> Union[DataFrame, List[Any], Paged_Result, StringResult]:	cdapython/Paginator.py:        print("ran Paginator.py _return_result")
cdapython/Paginator.py:    def _do_next(self: Paginator) -> Union[DataFrame, List[Any], Result, None]:	cdapython/Paginator.py:        print("ran Paginator.py _do_next")
cdapython/Paginator.py:    async def a_do_next(self) -> Union[List, DataFrame, Result, None]:	cdapython/Paginator.py:        print("ran Paginator.py a_do_next")
cdapython/Paginator.py:    def __iter__(self) -> Paginator:	cdapython/Paginator.py:        print("ran Paginator.py __iter__")
cdapython/Paginator.py:    def __aiter__(self) -> Paginator:	cdapython/Paginator.py:        print("ran Paginator.py __aiter__")
cdapython/Paginator.py:    async def __anext__(	cdapython/Paginator.py:        print("ran Paginator.py __anext__")
cdapython/Paginator.py:    def __next__(self) -> Union[List[Any], DataFrame, Paged_Result, None]:	cdapython/Paginator.py:        print("ran Paginator.py __next__")
cdapython/Q.py:def check_version_and_table(	cdapython/Q.py:    print("ran Q.py check_version_and_table")
cdapython/Q.py:    def default(self, o: Union[Q, "Query"]) -> Union[Any, Dict[str, Any], None]:	cdapython/Q.py:        print("ran Q.py _QEncoder default")
cdapython/Q.py:    def __repr__(self) -> str:	cdapython/Q.py:        print("ran Q.py DryClass __repr__")
cdapython/Q.py:    def __init__(	cdapython/Q.py:        print("ran Q.py Q __init__")
cdapython/Q.py:    def _set_system(self, system: str):	cdapython/Q.py:        print("ran Q.py Q _set_system)
cdapython/Q.py:    def _get_system(self) -> str:	cdapython/Q.py:        print("ran Q.py Q _get_system")
cdapython/Q.py:    def _set_limit(self, number: int) -> None:	cdapython/Q.py:        print("ran Q.py Q _set_limit")
cdapython/Q.py:    def _get_limit(self) -> int:	cdapython/Q.py:        print("ran Q.py Q _get_limit")
cdapython/Q.py:    def _set_offset(self, number: int) -> None:	cdapython/Q.py:        print("ran Q.py Q _set_offset")
cdapython/Q.py:    def _get_offset(self) -> int:	cdapython/Q.py:        print("ran Q.py Q _get_offset")
cdapython/Q.py:    def __iter__(	cdapython/Q.py:            print("ran Q.py Q __iter__")
cdapython/Q.py:    def __repr__(self) -> str:	cdapython/Q.py:        print("ran Q.py Q __repr__")
cdapython/Q.py:    def set_raw_string(self, text: str):	cdapython/Q.py:        print("ran Q.py Q set_raw_string")
cdapython/Q.py:    def get_raw_string(self):	cdapython/Q.py:        print("ran Q.py Q get_raw_string")
cdapython/Q.py:    def get_version() -> str:	cdapython/Q.py:        print("ran Q.py Q get_version")
cdapython/Q.py:    def set_version(self, table_version: str) -> Q:	cdapython/Q.py:        print("ran Q.py Q set_version")
cdapython/Q.py:    def set_host(self, host: str) -> Q:	cdapython/Q.py:        print("ran Q.py Q set_host")
cdapython/Q.py:    def get_host(self) -> str:	cdapython/Q.py:        print("ran Q.py Q get_host")
cdapython/Q.py:    def set_project(self, project: str) -> Q:	cdapython/Q.py:        print("ran Q.py Q set_project")
cdapython/Q.py:    def set_config(self, config: Qconfig = Qconfig()) -> Q:	cdapython/Q.py:        print("ran Q.py Q set_config")
cdapython/Q.py:    def get_config(self) -> Qconfig:	cdapython/Q.py:        print("ran Q.py Q get_config")
cdapython/Q.py:    def get_table(self) -> str:	cdapython/Q.py:        print("ran Q.py Q get_table")
cdapython/Q.py:    def get_verbose(self) -> bool:	cdapython/Q.py:        print("ran Q.py Q get_verbose")
cdapython/Q.py:    def get_counts(self) -> bool:	cdapython/Q.py:        print("ran Q.py Q get_counts")
cdapython/Q.py:    def set_counts(self, show_counts: bool) -> Q:	cdapython/Q.py:        print("ran Q.py Q set_counts")
cdapython/Q.py:    def set_verbose(self, value: bool) -> Q:	cdapython/Q.py:        print("ran Q.py Q set_verbose")
cdapython/Q.py:    def to_json(	cdapython/Q.py:        print("ran Q.py Q to_json")
cdapython/Q.py:    def to_dict(self) -> Any:	cdapython/Q.py:        print("ran Q.py Q to_dict")
cdapython/Q.py:    def open_Q_file(file: str) -> Q:	cdapython/Q.py:        print("ran Q.py Q open_Q_file")
cdapython/Q.py:    def from_file(	cdapython/Q.py:        print("ran Q.py Q from_file")
cdapython/Q.py:    def bulk_download(	cdapython/Q.py:        print("ran Q.py Q bulk_download")
cdapython/Q.py:    def bigquery_status(	cdapython/Q.py:        print("ran Q.py Q bigquery_status")
cdapython/Q.py:    def file(self) -> Q:	cdapython/Q.py:        print("ran Q.py Q file")
cdapython/Q.py:    def count(self) -> Q:	cdapython/Q.py:        print("ran Q.py Q count")
cdapython/Q.py:    def subject(self) -> Q:	cdapython/Q.py:        print("ran Q.py Q subject")
cdapython/Q.py:    def researchsubject(self) -> Q:	cdapython/Q.py:        print("ran Q.py Q researchsubject")
cdapython/Q.py:    def specimen(self) -> Q:	cdapython/Q.py:        print("ran Q.py Q specimen")
cdapython/Q.py:    def diagnosis(self) -> Q:	cdapython/Q.py:        print("ran Q.py Q diagnosis")
cdapython/Q.py:    def treatment(self) -> Q:	cdapython/Q.py:        print("ran Q.py Q treatment")
cdapython/Q.py:    def mutation(self) -> Q:	cdapython/Q.py:        print("ran Q.py Q mutation")
cdapython/Q.py:    def unique_terms(self) -> Q:	cdapython/Q.py:        print("ran Q.py Q unique_terms")
cdapython/Q.py:    def bool_query(self) -> Q:	cdapython/Q.py:        print("ran Q.py Q bool_query")
cdapython/Q.py:    def _call_endpoint(	cdapython/Q.py:        print("ran Q.py Q _call_endpoint")
cdapython/Q.py:    def _build_result_object(	cdapython/Q.py:        print("ran Q.py Q _build_result_object")
cdapython/Q.py:    def run(	cdapython/Q.py:        print("ran Q.py Q run")
cdapython/Q.py:    def q_wrap(self, right: Union[str, Q, Query, None], operator: str) -> Q:	cdapython/Q.py:        print("ran Q.py Q q_wrap")
cdapython/Q.py:    def AND(self, right: Union[str, Q]) -> Q:	cdapython/Q.py:        print("ran Q.py Q AND")
cdapython/Q.py:    def OR(self, right: Union[str, Q]) -> Q:	cdapython/Q.py:        print("ran Q.py Q OR")
cdapython/Q.py:    def FROM(self, right: Union[str, Q]) -> Q:	cdapython/Q.py:        print("ran Q.py Q FROM")
cdapython/Q.py:    def NOT(self) -> Q:	cdapython/Q.py:        print("ran Q.py Q NOT")
cdapython/Q.py:    def _Not_EQ(self, right: Union[str, Q]) -> Q:	cdapython/Q.py:        print("ran Q.py Q _Not_EQ")
cdapython/Q.py:    def _Greater_Than_EQ(self, right: Union[str, Q]) -> Q:	cdapython/Q.py:        print("ran Q.py Q _Greater_Than_EQ")
cdapython/Q.py:    def _Greater_Than(self, right: Union[str, Q]) -> Q:	cdapython/Q.py:        print("ran Q.py Q _Greater_Than")
cdapython/Q.py:    def _Less_Than_EQ(self, right: Q) -> Q:	cdapython/Q.py:        print("ran Q.py Q _Less_Than_EQ")
cdapython/Q.py:    def _Less_Than(self, right: Q) -> Q:	cdapython/Q.py:        print("ran Q.py Q _Less_Than")
cdapython/Q.py:    def SELECT(self, fields: str) -> Q:	cdapython/Q.py:        print("ran Q.py Q SELECT")
cdapython/Q.py:    def ORDER_BY(self, fields: str) -> Q:	cdapython/Q.py:        print("ran Q.py Q ORDER_BY")
cdapython/Q.py:    def _order_by(self, fields: str) -> Q:	cdapython/Q.py:        print("ran Q.py Q _order_by")
cdapython/Q.py:    def IS(self, fields: str) -> Q:	cdapython/Q.py:        print("ran Q.py Q IS")
cdapython/Q.py:    def __select(self, fields: str) -> Q:	cdapython/Q.py:        print("ran Q.py Q __select")
cdapython/Q.py:    def LIMIT(self, number: int) -> Q:	cdapython/Q.py:        print("ran Q.py Q LIMIT")
cdapython/Q.py:    def OFFSET(self, number: int) -> Q:	cdapython/Q.py:        print("ran Q.py Q OFFSET")
cdapython/__init__.py:def console_print(*args, **kwargs) -> None:	cdapython/__init__.py:    print("ran cdapython/__init__.py console_print")
cdapython/__init__.py:def __repr__() -> str:	cdapython/__init__.py:    print("ran cdapython/__init__.py __repr__")
cdapython/__init__.py.stupid:def console_print(*args, **kwargs) -> None:	cdapython/__init__.py.stupid:    print("ran cdapython/init_.py.stupid console_print")
cdapython/__init__.py.stupid:def __repr__() -> str:	cdapython/__init__.py.stupid:    print("ran cdapython/init_.py.stupid __repl__")
cdapython/__main__.py:def run_file(path: str) -> None:	cdapython/__main__.py:    print("ran cdapython/__main__.py run_file")
cdapython/__main__.py:def main() -> None:	cdapython/__main__.py:    print("ran cdapython/__main__.py main")
cdapython/constant_variables.py:    def version() -> str:	cdapython/constant_variables.py:        print("ran constant_variables version")
cdapython/decorators/cache.py:def lru_cache_timed(seconds: int = 10, maxsize: int = 128) -> Callable:	cdapython/decorators/cache.py:    print("ran cache.py lru_cache_timed")
cdapython/decorators/cache.py:    def wrapper_cache(func: Any) -> Callable:	cdapython/decorators/cache.py:        print("ran cache.py wrapper_cache")
cdapython/decorators/cache.py:        def wrapped_func(*args: Tuple[Any, Any], **kwargs: Dict[str, Any]) -> Any:	cdapython/decorators/cache.py:            print("ran cache.py wrapped_func")
cdapython/decorators/measure.py:    def __init__(self, verbose: bool = False) -> None:	cdapython/decorators/measure.py:        print("ran measure.py __init__")
cdapython/decorators/measure.py:    def __call__(self, func: F) -> FunctionAny[F]:	cdapython/decorators/measure.py:        print("ran measure.py __call__")
cdapython/decorators/measure.py:        def wrapper(*args: Tuple[Any], **kwargs: Measure_Type) -> FunctionAny[F]:	cdapython/decorators/measure.py:            print("ran measure.py wrapper")
cdapython/decorators/measure.py:    def __str__(self) -> str:	cdapython/decorators/measure.py:        print("ran measure.py __str__")
cdapython/endpoints.py:def _subject_query(	cdapython/endpoints.py:    print("ran endpoints.py _subject_query")
cdapython/endpoints.py:def _subject_files_query(	cdapython/endpoints.py:    print("ran endpoints.py _subject_files_query")
cdapython/endpoints.py:def _research_subject_query(	cdapython/endpoints.py:    print("ran endpoints.py _research_subject_query")
cdapython/endpoints.py:def _research_files_query(	cdapython/endpoints.py:    print("ran endpoints.py _research_subject_files_query")
cdapython/endpoints.py:def _specimen_query(	cdapython/endpoints.py:    print("ran endpoints.py _specimen_query")
cdapython/endpoints.py:def _specimen_files_query(	cdapython/endpoints.py:    print("ran endpoints.py _specimen_files_query")
cdapython/endpoints.py:def _diagnosis_query(	cdapython/endpoints.py:    print("ran endpoints.py _diagnosis_query")
cdapython/endpoints.py:def _treatments_query(	cdapython/endpoints.py:    print("ran endpoints.py _treatments_query")
cdapython/endpoints.py:def _boolean_query(	cdapython/endpoints.py:    print("ran endpoints.py _boolean_query")
cdapython/endpoints.py:def _files_query(	cdapython/endpoints.py:    print("ran endpoints.py _files_query")
cdapython/endpoints.py:def _counts_query(	cdapython/endpoints.py:    print("ran endpoints.py _counts_query")
cdapython/endpoints.py:def _diagnosis_counts_query(	cdapython/endpoints.py:    print("ran endpoints.py _diagnosis_counts_query")
cdapython/endpoints.py:def _researchsubject_counts_query(	cdapython/endpoints.py:    print("ran endpoints.py _researchsubject_counts_query")
cdapython/endpoints.py:def _subject_counts_query(	cdapython/endpoints.py:    print("ran endpoints.py _subject_counts_query")
cdapython/endpoints.py:def _specimen_counts_query(	cdapython/endpoints.py:    print("ran endpoints.py _specimen_counts_query")
cdapython/endpoints.py:def _treatment_counts_query(	cdapython/endpoints.py:    print("ran endpoints.py _treatment_counts_query")
cdapython/error_logger.py:def deprecated_values(old: str, new: str) -> None:	cdapython/error_logger.py:    print("ran error_logger.py deprecated_values")
cdapython/exceptions/custom_exception.py:    def __init__(self, keyword: str, message: str = "Q Syntax Error") -> None:	cdapython/exceptions/custom_exception.py:        print("ran custom_exception.py QSyntaxError __init__")
cdapython/exceptions/custom_exception.py:    def PRINT_Q_ERROR(self) -> str:	cdapython/exceptions/custom_exception.py:        print("ran custom_exception.py QSyntaxError PRINT_Q_ERROR")
cdapython/exceptions/custom_exception.py:    def __str__(self) -> str:	cdapython/exceptions/custom_exception.py:        print("ran custom_exception.py QSyntaxError __str__")
cdapython/exceptions/custom_exception.py:    def __repr__(self) -> str:	cdapython/exceptions/custom_exception.py:        print("ran custom_exception.py QSyntaxError __repr__")
cdapython/exceptions/custom_exception.py:    def __init__(	cdapython/exceptions/custom_exception.py:        print("ran custom_exception.py HTTP_ERROR_API __init__")
cdapython/exceptions/custom_exception.py:    def PRINT_Q_ERROR(self) -> str:	cdapython/exceptions/custom_exception.py:        print("ran custom_exception.py HTTP_ERROR_API PRINT_Q_ERROR")
cdapython/exceptions/custom_exception.py:    def __str__(self) -> str:	cdapython/exceptions/custom_exception.py:        print("ran custom_exception.py HTTP_ERROR_API __str__")
cdapython/exceptions/custom_exception.py:    def __repr__(self) -> str:	cdapython/exceptions/custom_exception.py:        print("ran custom_exception.py HTTP_ERROR_API __repr__")
cdapython/exceptions/custom_exception.py:    def __init__(self, http_error: ServiceException) -> None:	cdapython/exceptions/custom_exception.py:        print("ran custom_exception.py HTTP_ERROR_SERVICE __init__")
cdapython/factories/booleanquery/boolean_query.py:    def _call_endpoint(	cdapython/factories/booleanquery/boolean_query.py:        print("ran boolean_query.py _call_endpoint")
cdapython/factories/booleanquery/boolean_query.py:        def create(q_object: "Q") -> "BooleanQuery":	cdapython/factories/booleanquery/boolean_query.py:            print("ran boolean_query.py create")
cdapython/factories/count.py:    def file(self) -> "Q":	cdapython/factories/count.py:        print("ran factories/count.py file")
cdapython/factories/count.py:    def _call_endpoint(	cdapython/factories/count.py:        print("ran factories/count.py _call_endpoint")
cdapython/factories/count.py:    def _build_result_object(	cdapython/factories/count.py:        print("ran factories/count.py _build_result_object")
cdapython/factories/count.py:        def create(q_object: "Q") -> "Count":	cdapython/factories/count.py:            print("ran factories/count.py create")
cdapython/factories/diagnosis/count.py:    def file(self) -> "Q":	cdapython/factories/diagnosis/count.py:        print("ran diagnosis/count.py file")
cdapython/factories/diagnosis/count.py:    def count(self) -> "Q":	cdapython/factories/diagnosis/count.py:        print("ran diagnosis/count.py count")
cdapython/factories/diagnosis/count.py:    def _call_endpoint(	cdapython/factories/diagnosis/count.py:        print("ran diagnosis/count.py _call_endpoint")
cdapython/factories/diagnosis/count.py:    def _build_result_object(	cdapython/factories/diagnosis/count.py:        print("ran diagnosis/count.py _build_result_object")
cdapython/factories/diagnosis/count.py:        def create(q_object: "Q") -> "DiagnosisCount":	cdapython/factories/diagnosis/count.py:            print("ran diagnosis/count.py create")
cdapython/factories/diagnosis/diagnosis.py:    def count(self) -> "Q":	cdapython/factories/diagnosis/diagnosis.py:        print("ran diagnosis/diagnosis.py count")
cdapython/factories/diagnosis/diagnosis.py:    def _call_endpoint(	cdapython/factories/diagnosis/diagnosis.py:        print("ran diagnosis/diagnosis.py _call_endpoint")
cdapython/factories/diagnosis/diagnosis.py:        def create(q_object: "Q") -> "Diagnosis":	cdapython/factories/diagnosis/diagnosis.py:            print("ran diagnosis/diagnosis.py create")
cdapython/factories/entity.py:    def file(self) -> "Q":	cdapython/factories/entity.py:        print("ran factories/entity.py file")
cdapython/factories/entity.py:    def count(self) -> "Q":	cdapython/factories/entity.py:        print("ran factories/entity.py count")
cdapython/factories/file.py:    def count(self) -> "Q":	cdapython/factories/file.py:        print("ran factories/file.py count")
cdapython/factories/file.py:    def _call_endpoint(	cdapython/factories/file.py:        print("ran factories/file.py _call_endpoint")
cdapython/factories/file.py:        def create(q_object: "Q") -> "File":	cdapython/factories/file.py:            print("ran factories/file.py create")
cdapython/factories/file_count.py:    def _call_endpoint(	cdapython/factories/file_count.py:        print("ran factories/file_count.py _call_endpoint")
cdapython/factories/file_count.py:    def _build_result_object(	cdapython/factories/file_count.py:        print("ran factories/file_count.py _build_result_object")
cdapython/factories/file_count.py:        def create(q_object: "Q") -> "FileCount":	cdapython/factories/file_count.py:            print("ran factories/file_count.py create")
cdapython/factories/mutations/count.py:    def file(self) -> "Q":	cdapython/factories/mutations/count.py:        print("ran mutations/count.py file")
cdapython/factories/mutations/count.py:    def _call_endpoint(	cdapython/factories/mutations/count.py:        print("ran mutations/count.py _call_endpoint")
cdapython/factories/mutations/count.py:    def _build_result_object(	cdapython/factories/mutations/count.py:        print("ran mutations/count.py _build_result_object")
cdapython/factories/mutations/count.py:        def create(q_object: "Q") -> "MutationsCount":	cdapython/factories/mutations/count.py:            print("ran mutations/count.py create")
cdapython/factories/mutations/mutations.py:    def count(self) -> "Q":	cdapython/factories/mutations/mutations.py:        print("ran mutations/mutations.py count")
cdapython/factories/mutations/mutations.py:    def _call_endpoint(	cdapython/factories/mutations/mutations.py:        print("ran mutations/mutations.py _call_endpoint")
cdapython/factories/mutations/mutations.py:        def create(q_object: "Q") -> "Mutations":	cdapython/factories/mutations/mutations.py:            print("ran mutations/mutations.py create")
cdapython/factories/q_factory.py:    def create(q_object: "Q") -> Union[Any, "Q"]:	cdapython/factories/q_factory.py:        print("ran factories/q_factory.py AbstractFactory create")
cdapython/factories/q_factory.py:    def add_factory(id: str, q_factory: Any) -> None:	cdapython/factories/q_factory.py:        print("ran factories/q_factory.py QFactory add_factory")
cdapython/factories/q_factory.py:    def create_entity(id: str, q_object: "Q") -> "Q":	cdapython/factories/q_factory.py:        print("ran factories/q_factory.py QFactory create_entity")
cdapython/factories/research_subject/count.py:    def file(self) -> "Q":	cdapython/factories/research_subject/count.py:        print("ran research_subject/count.py file")
cdapython/factories/research_subject/count.py:    def _call_endpoint(	cdapython/factories/research_subject/count.py:        print("ran research_subject/count.py _call_endpoint")
cdapython/factories/research_subject/count.py:    def _build_result_object(	cdapython/factories/research_subject/count.py:        print("ran research_subject/count.py _build_result_object")
cdapython/factories/research_subject/count.py:        def create(q_object: "Q") -> "ResearchSubjectCount":	cdapython/factories/research_subject/count.py:            print("ran research_subject/count.py create")
cdapython/factories/research_subject/file.py:    def file(self) -> "Q":	cdapython/factories/research_subject/file.py:        print("ran research_subject/file.py file")
cdapython/factories/research_subject/file.py:    def count(self) -> "Q":	cdapython/factories/research_subject/file.py:        print("ran research_subject/file.py count")
cdapython/factories/research_subject/file.py:    def _call_endpoint(	cdapython/factories/research_subject/file.py:        print("ran research_subject/file.py _call_endpoint")
cdapython/factories/research_subject/file.py:        def create(q_object: "Q") -> "ResearchSubjectFiles":	cdapython/factories/research_subject/file.py:            print("ran research_subject/file.py create")
cdapython/factories/research_subject/file_count.py:    def file(self) -> "Q":	cdapython/factories/research_subject/file_count.py:        print("ran research_subject/file_count.py file")
cdapython/factories/research_subject/file_count.py:    def count(self) -> "Q":	cdapython/factories/research_subject/file_count.py:        print("ran research_subject/file_count.py count")
cdapython/factories/research_subject/file_count.py:    def _call_endpoint(	cdapython/factories/research_subject/file_count.py:        print("ran research_subject/file_count.py _call_endpoint")
cdapython/factories/research_subject/file_count.py:    def _build_result_object(	cdapython/factories/research_subject/file_count.py:        print("ran research_subject/file_count.py _build_result_object")
cdapython/factories/research_subject/file_count.py:        def create(q_object: "Q") -> "ResearchSubjectFileCount":	cdapython/factories/research_subject/file_count.py:            print("ran research_subject/file_count.py create")
cdapython/factories/research_subject/research_subject.py:    def file(self) -> "Q":	cdapython/factories/research_subject/research_subject.py:        print("ran research_subject/research_subject.py file")
cdapython/factories/research_subject/research_subject.py:    def count(self) -> "Q":	cdapython/factories/research_subject/research_subject.py:        print("ran research_subject/research_subject.py count")
cdapython/factories/research_subject/research_subject.py:    def _call_endpoint(	cdapython/factories/research_subject/research_subject.py:        print("ran research_subject/research_subject.py _call_endpoint")
cdapython/factories/research_subject/research_subject.py:        def create(q_object: "Q") -> "ResearchSubject":	cdapython/factories/research_subject/research_subject.py:            print("ran research_subject/research_subject.py create")
cdapython/factories/specimen/count.py:    def file(self) -> "Q":	cdapython/factories/specimen/count.py:        print("ran specimen/count.py file")
cdapython/factories/specimen/count.py:    def _call_endpoint(	cdapython/factories/specimen/count.py:        print("ran specimen/count.py _call_endpoint")
cdapython/factories/specimen/count.py:    def _build_result_object(	cdapython/factories/specimen/count.py:        print("ran specimen/count.py _build_return_object")
cdapython/factories/specimen/count.py:        def create(q_object: "Q") -> "SpecimenCount":	cdapython/factories/specimen/count.py:            print("ran specimen/count.py create")
cdapython/factories/specimen/file.py:    def file(self) -> "Q":	cdapython/factories/specimen/file.py:        print("ran specimen/file.py file")
cdapython/factories/specimen/file.py:    def count(self) -> "Q":	cdapython/factories/specimen/file.py:        print("ran specimen/file.py count")
cdapython/factories/specimen/file.py:    def _call_endpoint(	cdapython/factories/specimen/file.py:        print("ran specimen/file.py _call_endpoint")
cdapython/factories/specimen/file.py:        def create(q_object: "Q") -> "SpecimenFiles":	cdapython/factories/specimen/file.py:            print("ran specimen/file.py create")
cdapython/factories/specimen/file_count.py:    def file(self) -> "Q":	cdapython/factories/specimen/file_count.py:        print("ran specimen/file_count.py file")
cdapython/factories/specimen/file_count.py:    def count(self) -> "Q":	cdapython/factories/specimen/file_count.py:        print("ran specimen/file_count.py count")
cdapython/factories/specimen/file_count.py:    def _call_endpoint(	cdapython/factories/specimen/file_count.py:        print("ran specimen/file_count.py _call_endpoint")
cdapython/factories/specimen/file_count.py:    def _build_result_object(	cdapython/factories/specimen/file_count.py:        print("ran specimen/file_count.py _build_result_object")
cdapython/factories/specimen/file_count.py:        def create(q_object: "Q") -> "SpecimenFileCount":	cdapython/factories/specimen/file_count.py:            print("ran specimen/file_count.py create")
cdapython/factories/specimen/specimen.py:    def file(self) -> "Q":	cdapython/factories/specimen/specimen.py:        print("ran specimen/specimen.py file")
cdapython/factories/specimen/specimen.py:    def count(self) -> "Q":	cdapython/factories/specimen/specimen.py:        print("ran specimen/specimen.py count")
cdapython/factories/specimen/specimen.py:    def _call_endpoint(	cdapython/factories/specimen/specimen.py:        print("ran specimen/specimen.py _call_endpoint")
cdapython/factories/specimen/specimen.py:        def create(q_object: "Q") -> "Specimen":	cdapython/factories/specimen/specimen.py:            print("ran specimen/specimen.py create")
cdapython/factories/subject/count.py:    def file(self) -> "Q":	cdapython/factories/subject/count.py:        print("ran subject/count.py file")
cdapython/factories/subject/count.py:    def _call_endpoint(	cdapython/factories/subject/count.py:        print("ran subject/count.py _call_endpoint")
cdapython/factories/subject/count.py:    def _build_result_object(	cdapython/factories/subject/count.py:        print("ran subject/count.py _build_result_object")
cdapython/factories/subject/count.py:        def create(q_object: "Q") -> "SubjectCount":	cdapython/factories/subject/count.py:            print("ran subject/count.py create")
cdapython/factories/subject/file.py:    def file(self) -> "Q":	cdapython/factories/subject/file.py:        print("ran subject/file.py file")
cdapython/factories/subject/file.py:    def count(self) -> "Q":	cdapython/factories/subject/file.py:        print("ran subject/file.py count")
cdapython/factories/subject/file.py:    def _call_endpoint(	cdapython/factories/subject/file.py:        print("ran subject/file.py _call_endpoint")
cdapython/factories/subject/file.py:        def create(q_object: "Q") -> "SubjectFiles":	cdapython/factories/subject/file.py:            print("ran subject/file.py create")
cdapython/factories/subject/file_count.py:    def file(self) -> "Q":	cdapython/factories/subject/file_count.py:        print("ran subject/file_count.py file")
cdapython/factories/subject/file_count.py:    def count(self) -> "Q":	cdapython/factories/subject/file_count.py:        print("ran subject/file_count.py count")
cdapython/factories/subject/file_count.py:    def _call_endpoint(	cdapython/factories/subject/file_count.py:        print("ran subject/file_count.py _call_endpoint")
cdapython/factories/subject/file_count.py:    def _build_result_object(	cdapython/factories/subject/file_count.py:        print("ran subject/file_count.py _build_result_object")
cdapython/factories/subject/file_count.py:        def create(q_object: "Q") -> "SubjectFileCount":	cdapython/factories/subject/file_count.py:            print("ran subject/file_count.py create")
cdapython/factories/subject/subject.py:    def file(self) -> "Q":	cdapython/factories/subject/subject.py:        print("ran subject/subject.py file")
cdapython/factories/subject/subject.py:    def count(self) -> "Q":	cdapython/factories/subject/subject.py:        print("ran subject/subject.py count")
cdapython/factories/subject/subject.py:    def _call_endpoint(	cdapython/factories/subject/subject.py:        print("ran subject/subject.py _call_endpoint")
cdapython/factories/subject/subject.py:        def create(q_object: "Q") -> "Subject":	cdapython/factories/subject/subject.py:            print("ran subject/subject.py create")
cdapython/factories/treatment/count.py:    def _call_endpoint(	cdapython/factories/treatment/count.py:        print("ran treatement/count.py _call_endpoint")
cdapython/factories/treatment/count.py:    def _build_result_object(	cdapython/factories/treatment/count.py:        print("ran treatement/count.py _build_result_object")
cdapython/factories/treatment/count.py:        def create(q_object: "Q") -> "TreatmentCount":	cdapython/factories/treatment/count.py:            print("ran treatement/count.py create")
cdapython/factories/treatment/treatment.py:    def count(self) -> "Q":	cdapython/factories/treatment/treatment.py:        print("ran treatment/treatment.py count")
cdapython/factories/treatment/treatment.py:    def _call_endpoint(	cdapython/factories/treatment/treatment.py:        print("ran treatment/treatment.py _call_endpoint")
cdapython/factories/treatment/treatment.py:        def create(q_object: "Q") -> "Treatment":	cdapython/factories/treatment/treatment.py:            print("ran treatment/treatment.py create")
cdapython/factories/unique_terms/unique_terms_endpoint.py:    def _call_endpoint(	cdapython/factories/unique_terms/unique_terms_endpoint.py:        print("ran unique_terms/unique_terms_endpoint.py _call_endpoint")
cdapython/factories/unique_terms/unique_terms_endpoint.py:        def create(q_object: "Q") -> "UniqueTerms":	cdapython/factories/unique_terms/unique_terms_endpoint.py:            print("ran unique_terms/unique_terms_endpoint.py create")
cdapython/parsers/base_parser.py:    def __init__(self) -> None:	cdapython/parsers/base_parser.py:        print("ran parsers/base_parser.py __init__")
cdapython/parsers/base_parser.py:    def _str_strip(self, val: str) -> Union[str, None]:	cdapython/parsers/base_parser.py:        print("ran parsers/base_parser.py _str_strip")
cdapython/parsers/base_parser.py:    def _build_Query(self, args, node_type: str):	cdapython/parsers/base_parser.py:        print("ran parsers/base_parser.py _build_Query")
cdapython/parsers/base_parser.py:    def expression_math(self, args) -> Query:	cdapython/parsers/base_parser.py:        print("ran parsers/base_parser.py expression_math")
cdapython/parsers/base_parser.py:    def count(self, args) -> Query:	cdapython/parsers/base_parser.py:        print("ran parsers/base_parser.py count")
cdapython/parsers/base_parser.py:    def replace(self, args) -> Query:	cdapython/parsers/base_parser.py:        print("ran parsers/base_parser.py replace")
cdapython/parsers/base_parser.py:    def function(self, args) -> Query:	cdapython/parsers/base_parser.py:        print("ran parsers/base_parser.py function")
cdapython/parsers/base_parser.py:    def neg(self, args) -> Query:	cdapython/parsers/base_parser.py:        print("ran parsers/base_parser.py neg")
cdapython/parsers/base_parser.py:    def number(self, args: List[Token]):	cdapython/parsers/base_parser.py:        print("ran parsers/base_parser.py number")
cdapython/parsers/base_parser.py:    def expression_add(self, args):	cdapython/parsers/base_parser.py:        print("ran parsers/base_parser.py expression_add")
cdapython/parsers/base_parser.py:    def expression_mul(self, args) -> Query:	cdapython/parsers/base_parser.py:        print("ran parsers/base_parser.py expression_mul")
cdapython/parsers/base_parser.py:    def expression_sub(self, args) -> Query:	cdapython/parsers/base_parser.py:        print("ran parsers/base_parser.py expression_sub")
cdapython/parsers/base_parser.py:    def expression_div(self, args) -> Query:	cdapython/parsers/base_parser.py:        print("ran parsers/base_parser.py expression_div")
cdapython/parsers/base_parser.py:    def bool_or(self, args) -> Query:	cdapython/parsers/base_parser.py:        print("ran parsers/base_parser.py bool_or")
cdapython/parsers/base_parser.py:    def bool_and(self, args) -> Query:	cdapython/parsers/base_parser.py:        print("ran parsers/base_parser.py bool_and")
cdapython/parsers/base_parser.py:    def bool_expression(self, args):	cdapython/parsers/base_parser.py:        print("ran parsers/base_parser.py bool_expression")
cdapython/parsers/base_parser.py:    def bool_parentheses(self, args):	cdapython/parsers/base_parser.py:        print("ran parsers/base_parser.py bool_parentheses")
cdapython/parsers/base_parser.py:    def comparison_type(self, args):	cdapython/parsers/base_parser.py:        print("ran parsers/base_parser.py comparison_type")
cdapython/parsers/base_parser.py:    def not_op(self, args) -> Query:	cdapython/parsers/base_parser.py:        print("ran parsers/base_parser.py not_op")
cdapython/parsers/base_parser.py:    def not_equals(self, args) -> Query:	cdapython/parsers/base_parser.py:        print("ran parsers/base_parser.py not_equals")
cdapython/parsers/base_parser.py:    def greater_than(self, args) -> Query:	cdapython/parsers/base_parser.py:        print("ran parsers/base_parser.py greater_than")
cdapython/parsers/base_parser.py:    def less_than(self, args) -> Query:	cdapython/parsers/base_parser.py:        print("ran parsers/base_parser.py less_than")
cdapython/parsers/base_parser.py:    def greater_than_or_equal(self, args) -> Query:	cdapython/parsers/base_parser.py:        print("ran parsers/base_parser.py greater_than_or_equal")
cdapython/parsers/base_parser.py:    def less_than_or_equal(self, args) -> Query:	cdapython/parsers/base_parser.py:        print("ran parsers/base_parser.py less_than_or_equal")
cdapython/parsers/base_parser.py:    def is_not(self, args) -> Query:	cdapython/parsers/base_parser.py:        print("ran parsers/base_parser.py is_not")
cdapython/parsers/base_parser.py:    def is_op(self, args) -> Query:	cdapython/parsers/base_parser.py:        print("ran parsers/base_parser.py is_op")
cdapython/parsers/base_parser.py:    def name(self, args):	cdapython/parsers/base_parser.py:        print("ran parsers/base_parser.py name")
cdapython/parsers/base_parser.py:    def null(self, _) -> Query:	cdapython/parsers/base_parser.py:        print("ran parsers/base_parser.py null")
cdapython/parsers/base_parser.py:    def array(self, args) -> Query:	cdapython/parsers/base_parser.py:        print("ran parsers/base_parser.py array")
cdapython/parsers/base_parser.py:    def paren(self, args) -> Query:	cdapython/parsers/base_parser.py:        print("ran parsers/base_parser.py paren")
cdapython/parsers/base_parser.py:    def not_in_expr(self, args) -> Query:	cdapython/parsers/base_parser.py:        print("ran parsers/base_parser.py not_in_expr")
cdapython/parsers/base_parser.py:    def in_expr(self, args) -> Query:	cdapython/parsers/base_parser.py:        print("ran parsers/base_parser.py in_expr")
cdapython/parsers/base_parser.py:    def q_syntax_error_case(self, args) -> NoReturn:	cdapython/parsers/base_parser.py:        print("ran parsers/base_parser.py q_syntax_error_case")
cdapython/parsers/base_parser.py:    def string(self, args) -> Query:	cdapython/parsers/base_parser.py:        print("ran parsers/base_parser.py string")
cdapython/parsers/base_parser.py:    def column_name(self, args) -> Query:	cdapython/parsers/base_parser.py:        print("ran parsers/base_parser.py column_name")
cdapython/parsers/base_parser.py:    def equals(self, args: List[Query]) -> Query:	cdapython/parsers/base_parser.py:        print("ran parsers/base_parser.py equals")
cdapython/parsers/functions.py:def col(col_name: Union[str, Query, None]) -> Query:	cdapython/parsers/functions.py:    print("ran parsers/functions.py col")
cdapython/parsers/functions.py:def quoted(quoted_val: Union[str, Query, None]) -> Query:	cdapython/parsers/functions.py:    print("ran parsers/functions.py quoted")
cdapython/parsers/functions.py:def unquoted(val: Union[str, Query, None]) -> Query:	cdapython/parsers/functions.py:    print("ran parsers/functions.py unquoted")
cdapython/parsers/functions.py:def infer_quote(val: QueryStr) -> QueryStr:	cdapython/parsers/functions.py:    print("ran parsers/functions.py infer_quote line 25")
cdapython/parsers/functions.py:def infer_quote(val: Query) -> Query:	cdapython/parsers/functions.py:    print("ran parsers/functions.py infer_quote line 39")
cdapython/parsers/functions.py:def infer_quote(val: str) -> str:	cdapython/parsers/functions.py:    print("ran parsers/functions.py infer_quote line 53")
cdapython/parsers/functions.py:def infer_quote(val: Union[str, Query, QueryStr]) -> Union[Query, QueryStr, str]:	cdapython/parsers/functions.py:    print("ran parsers/functions.py infer_quote line 66")
cdapython/parsers/functions.py:def query_type_conversion(	cdapython/parsers/functions.py:    print("ran parsers/functions.py query_type_conversion")
cdapython/parsers/select_parser.py:    def __init__(self) -> None:	cdapython/parsers/select_parser.py:        print("ran parsers/select_parser.py Parse_Tree __init__")
cdapython/parsers/select_parser.py:    def select_expression(self, args):	cdapython/parsers/select_parser.py:        print("ran parsers/select_parser.py select_expression")
cdapython/parsers/select_parser.py:    def select(self, args: List[Query]):	cdapython/parsers/select_parser.py:        print("ran parsers/select_parser.py select")
cdapython/parsers/select_parser.py:    def set_expr(self, args):	cdapython/parsers/select_parser.py:        print("ran parsers/select_parser.py set_expr")
cdapython/parsers/select_parser.py:    def final(self, args):	cdapython/parsers/select_parser.py:        print("ran parsers/select_parser.py final")
cdapython/parsers/select_parser.py:def sql_function_parser(text: str) -> Query:	cdapython/parsers/select_parser.py:    print("ran parsers/select_parser.py sql_function_parser")
cdapython/parsers/utils.py:def read_lark(grammer_file: str, grammer_folder: str = "lark") -> str:	cdapython/parsers/utils.py:    print("ran parsers/utils.py read_lark")
cdapython/parsers/where_parser.py:    def __init__(self) -> None:	cdapython/parsers/where_parser.py:        print("ran parsers/where_parser.py Parse Q __init__")
cdapython/parsers/where_parser.py:    def tree(self):	cdapython/parsers/where_parser.py:        print("ran parsers/where_parser.py tree")
cdapython/parsers/where_parser.py:    def q(self, args) -> Query:	cdapython/parsers/where_parser.py:        print("ran parsers/where_parser.py q")
cdapython/parsers/where_parser.py:    def like_expr(self, args):	cdapython/parsers/where_parser.py:        print("ran parsers/where_parser.py like_expr")
cdapython/parsers/where_parser.py:    def statement(self, args: Tree):	cdapython/parsers/where_parser.py:        print("ran parsers/where_parser.py statement")
cdapython/parsers/where_parser.py:    def word(self, word: Token):	cdapython/parsers/where_parser.py:        print("ran parsers/where_parser.py word")
cdapython/parsers/where_parser.py:    def expression(self, args) -> Query:	cdapython/parsers/where_parser.py:        print("ran parsers/where_parser.py expression")
cdapython/parsers/where_parser.py:    def from_expr(self, args) -> Query:	cdapython/parsers/where_parser.py:        print("ran parsers/where_parser.py from_expr")
cdapython/parsers/where_parser.py:    def not_equals(self, args) -> Query:	cdapython/parsers/where_parser.py:        print("ran parsers/where_parser.py not_equals")
cdapython/parsers/where_parser.py:    def equals(self, args: List[Query]) -> Query:	cdapython/parsers/where_parser.py:        print("ran parsers/where_parser.py equals")
cdapython/parsers/where_parser.py:    def single_quotes(self, args) -> Query:	cdapython/parsers/where_parser.py:        print("ran parsers/where_parser.py single_quotes")
cdapython/parsers/where_parser.py:    def unique_terms_string(self, args) -> Query:	cdapython/parsers/where_parser.py:        print("ran parsers/where_parser.py unique_terms_string")
cdapython/parsers/where_parser.py:    def start(self, children):	cdapython/parsers/where_parser.py:        print("ran parsers/where_parser.py start")
cdapython/parsers/where_parser.py:def where_parser(text: str, debug: bool = False):	cdapython/parsers/where_parser.py:    print("ran parsers/where_parser.py where_parser")
cdapython/results/base.py:    def __init__(	cdapython/results/base.py:        print("ran base.py __init__")
cdapython/results/base.py:    def __dict__(self) -> Dict[str, Any]:  # type: ignore	cdapython/results/base.py:        print("ran base.py __dict__")
cdapython/results/base.py:    def __eq__(self, __other: object) -> Union[Any, Literal[False]]:	cdapython/results/base.py:        print("ran base.py __eq__")
cdapython/results/base.py:    def __hash__(self) -> int:	cdapython/results/base.py:        print("ran base.py __hash__")
cdapython/results/base.py:    def __contains__(self, value: str) -> bool:	cdapython/results/base.py:        print("ran base.py __contains__")
cdapython/results/base.py:    def count(self) -> int:	cdapython/results/base.py:        print("ran base.py count")
cdapython/results/base.py:    def to_dataframe(	cdapython/results/base.py:        print("ran base.py to_dataframe")
cdapython/results/base.py:    def df_to_table(	cdapython/results/base.py:        print("ran base.py df_to_table")
cdapython/results/base.py:    def join_as_str(self, key: str, delimiter: str = ",") -> str:	cdapython/results/base.py:        print("ran base.py join_as_str")
cdapython/results/base.py:        def find_field(	cdapython/results/base.py:            print("ran base.py find_field")
cdapython/results/base.py:    def to_list(self) -> List[Any]:	cdapython/results/base.py:        print("ran base.py to_list")
cdapython/results/base.py:    def __len__(self) -> int:	cdapython/results/base.py:        print("ran base.py __len__")
cdapython/results/base.py:    def __getitem__(	cdapython/results/base.py:        print("ran base.py __getitem__")
cdapython/results/base.py:    def __iter__(self) -> Iterator[Any]:	cdapython/results/base.py:        print("ran base.py __iter__")
cdapython/results/base.py:    def __aiter__(self) -> AsyncGenerator[Any, None]:	cdapython/results/base.py:            print("ran base.py __aiter__ temp")
cdapython/results/base.py:        async def tmp() -> AsyncGenerator[Any, None]:	cdapython/results/base.py:        print("ran base.py __aiter__")
cdapython/results/base.py:    def sort(self, function):	cdapython/results/base.py:        print("ran base.py sort")
cdapython/results/base.py:    # def contains(List[dict]):	cdapython/results/base.py:    #     print("ran base.py contains")
cdapython/results/base.py:    # def filter(self,function):	cdapython/results/base.py:    #     print("ran base.py filter")
cdapython/results/base.py:    def pretty_print(self, idx: Optional[int] = None) -> None:	cdapython/results/base.py:        print("ran base.py pretty_print")
cdapython/results/columns_result.py:    def __init__(	cdapython/results/columns_result.py:        print("ran columns_result.py __init__")
cdapython/results/columns_result.py:    def _repr_value(self, show_value: Optional[bool]) -> str:	cdapython/results/columns_result.py:        print("ran columns_result.py _repr_value")
cdapython/results/columns_result.py:    def __repr__(self) -> str:	cdapython/results/columns_result.py:        print("ran columns_result.py __repr__")
cdapython/results/columns_result.py:    def __str__(self) -> str:	cdapython/results/columns_result.py:        print("ran columns_result.py __str__")
cdapython/results/columns_result.py:    def to_list(	cdapython/results/columns_result.py:        print("ran columns_result.py to_list")
cdapython/results/columns_result.py:    def to_dataframe(	cdapython/results/columns_result.py:        print("ran columns_result.py to_dataframe")
cdapython/results/count_result.py:    def _repr_value(self, show_value: Optional[bool]) -> str:	cdapython/results/count_result.py:        print("ran count_result.py _repr_value")
cdapython/results/count_result.py:    def isnotebook(self) -> bool:	cdapython/results/count_result.py:        print("ran count_result.py isnotebook")
cdapython/results/factories/collect_result.py:    def __init__(	cdapython/results/factories/collect_result.py:        print("ran collect_result.py __init__")
cdapython/results/factories/collect_result.py:    def extend_result(self, result: Result) -> None:	cdapython/results/factories/collect_result.py:        print("ran collect_result.py extend_result")
cdapython/results/factories/collect_result.py:    def get_all(	cdapython/results/factories/collect_result.py:        print("ran collect_result.py get_all")
cdapython/results/factories/collect_result.py:    def paginator(	cdapython/results/factories/collect_result.py:        print("ran collect_result.py paginator")
cdapython/results/factories/collect_result.py:        def create(q_object: Result) -> CollectResult:	cdapython/results/factories/collect_result.py:            print("ran collect_result.py create")
cdapython/results/factories/not_paginated_result.py:    def __init__(	cdapython/results/factories/not_paginated_result.py:        print("ran not_paginated_result.py __init__")
cdapython/results/factories/not_paginated_result.py:    def paginator(	cdapython/results/factories/not_paginated_result.py:        print("ran not_paginated_result.py paginator")
cdapython/results/factories/not_paginated_result.py:    def get_all(	cdapython/results/factories/not_paginated_result.py:        print("ran not_paginated_result.py get_all")
cdapython/results/factories/result_factory.py:    def create(q_object: Result) -> Result:	cdapython/results/factories/result_factory.py:        print("ran result_factory.py AbstractFactory create")
cdapython/results/factories/result_factory.py:    def add_factory(id: str, result_factory: Any) -> None:	cdapython/results/factories/result_factory.py:        print("ran result_factory.py add_factory")
cdapython/results/factories/result_factory.py:    def create_entity(id: str, result_object: Any) -> Result:	cdapython/results/factories/result_factory.py:        print("ran result_factory.py create_entity")
cdapython/results/page_result.py:    def __init__(	cdapython/results/page_result.py:        print("ran page_result.py __init__")
cdapython/results/page_result.py:    def _get_result(	cdapython/results/page_result.py:        print("ran page_result.py _get_result")
cdapython/results/page_result.py:    def paginator(	cdapython/results/page_result.py:        print("ran page_result.py paginator")
cdapython/results/page_result.py:    def return_result(	cdapython/results/page_result.py:        print("ran page_result.py return_result")
cdapython/results/page_result.py:    def get_all(	cdapython/results/page_result.py:        print("ran page_result.py get_all")
cdapython/results/page_result.py:    async def async_next_page(	cdapython/results/page_result.py:        print("ran page_result.py async_next_page")
cdapython/results/page_result.py:    async def async_prev_page(	cdapython/results/page_result.py:        print("ran page_result.py async_prev_page")
cdapython/results/page_result.py:    def next_page(	cdapython/results/page_result.py:        print("ran page_result.py next_page")
cdapython/results/page_result.py:    def prev_page(	cdapython/results/page_result.py:        print("ran page_result.py prev_page")
cdapython/results/page_result.py:def get_query_result(	cdapython/results/page_result.py:    print("ran page_result.py get_query_result")
cdapython/results/result.py:    def __init__(	cdapython/results/result.py:        print("ran result.py __init__")
cdapython/results/result.py:    def _repr_value(self, show_value: Optional[bool]) -> str:	cdapython/results/result.py:        print("ran result.py _repr_value")
cdapython/results/result.py:    def __repr__(self) -> str:	cdapython/results/result.py:        print("ran result.py __repr__")
cdapython/results/result.py:    def __str__(self) -> str:	cdapython/results/result.py:        print("ran result.py __str__")
cdapython/results/result.py:    def __dict__(self) -> Dict[str, Any]:  # type: ignore	cdapython/results/result.py:        print("ran result.py __dict__")
cdapython/results/result.py:    def __eq__(self, __other: object) -> Union[Any, Literal[False]]:	cdapython/results/result.py:        print("ran result.py __eq__")
cdapython/results/result.py:    def __hash__(self) -> int:	cdapython/results/result.py:        print("ran result.py __hash__")
cdapython/results/result.py:    def __contains__(self, value: str) -> bool:	cdapython/results/result.py:        print("ran result.py __contains__")
cdapython/results/result.py:    def sql(self) -> str:	cdapython/results/result.py:        print("ran result.py sql")
cdapython/results/result.py:    def count(self) -> int:	cdapython/results/result.py:        print("ran result.py count")
cdapython/results/result.py:    def total_row_count(self) -> int:	cdapython/results/result.py:        print("ran result.py total_row_count line 140")
cdapython/results/result.py:    def total_row_count(self, value: int):	cdapython/results/result.py:        print("ran result.py total_row_count line 154")
cdapython/results/result.py:    def has_next_page(self) -> bool:	cdapython/results/result.py:        print("ran result.py has_next_page")
cdapython/results/string_result.py:    def __init__(	cdapython/results/string_result.py:        print("ran string_result.py __init__")
cdapython/results/string_result.py:    def get_all(self) -> None:	cdapython/results/string_result.py:        print("ran string_result.py get_all")
cdapython/results/string_result.py:    def to_list(self, filters: Optional[str] = None, exact: bool = False) -> list:	cdapython/results/string_result.py:        print("ran string_result.py to_list")
cdapython/shell.py:def help() -> None:	cdapython/shell.py:    print("ran shell.py help")
cdapython/utils/Cda_Configuration.py:    def __init__(	cdapython/utils/Cda_Configuration.py:        print("ran Cda_Configuration.py __init__")
cdapython/utils/Cda_Configuration.py:    def _check_verify(self, *args: Tuple[Any, Any], **kwds: Dict[Any, Any]) -> None:	cdapython/utils/Cda_Configuration.py:        print("ran Cda_Configuration.py _check_verify")
cdapython/utils/Cda_Configuration.py:    def _find_ssl_path(self) -> bool:	cdapython/utils/Cda_Configuration.py:        print("ran Cda_Configuration.py _find_ssl_path")
cdapython/utils/Cda_Configuration.py:    def _unverified_http(self) -> None:	cdapython/utils/Cda_Configuration.py:        print("ran Cda_Configuration.py _unverified_http")
cdapython/utils/Qconfig.py:    def __init__(	cdapython/utils/Qconfig.py:        print("ran Qconfig.py __init__")
cdapython/utils/Qconfig.py:    def copy_config(self) -> Qconfig:	cdapython/utils/Qconfig.py:        print("ran Qconfig.py copy_config")
cdapython/utils/check_case.py:def check_keyword(value: str) -> None:	cdapython/utils/check_case.py:    print("ran check_case.py check_keyword")
cdapython/utils/none_check.py:def none_check(object: Union[T, None]) -> T:	cdapython/utils/none_check.py:    print("ran none_check.py none_check")
cdapython/utils/utility.py:def get_version() -> str:	cdapython/utils/utility.py:    print("ran utility.py get_version")
cdapython/utils/utility.py:def set_host_url(url: str) -> None:	cdapython/utils/utility.py:    print("ran utility.py set_host_url")
cdapython/utils/utility.py:def get_host_url() -> str:	cdapython/utils/utility.py:    print("ran utility.py get_host_url")
cdapython/utils/utility.py:def set_default_project_dataset(table: str) -> None:	cdapython/utils/utility.py:    print("ran utility.py set_default_project_dataset")
cdapython/utils/utility.py:def get_default_project_dataset() -> str:	cdapython/utils/utility.py:    print("ran utility.py get_default_project_dataset")
cdapython/utils/utility.py:def set_table_version(table_version: str) -> None:	cdapython/utils/utility.py:    print("ran utility.py set_table_version")
cdapython/utils/utility.py:def get_table_version() -> str:	cdapython/utils/utility.py:    print("ran utility.py get_table_version")
cdapython/utils/utility.py:def unique_terms(	cdapython/utils/utility.py:    print("ran utility.py unique_terms")
cdapython/utils/utility.py:def columns(	cdapython/utils/utility.py:    print("ran utility.py columns")
setup.py:def get_version(filepath: str):	setup.py:    print("ran setup.py get_version")
tasks.py:    def __init__(self):	tasks.py:        print("ran tasks.py Handler __init__")
tasks.py:    def on_any_event(self, event):	tasks.py:        print("ran tasks.py Handler on_any_event")
tasks.py:def black_w(c, args):	tasks.py:    print("ran tasks.py black_w")
tasks.py:def venv(c):	tasks.py:    print("ran tasks.py venv")
tasks.py:def formatting(c) -> None:	tasks.py:    print("ran tasks.py formatting")
tasks.py:def mypy(c, args=None) -> None:	tasks.py:    print("ran tasks.py mypy")
tasks.py:def tests(c, args=None) -> None:	tasks.py:    print("ran tasks.py tests")
tasks.py:def lint(c, args=None) -> None:	tasks.py:    print("ran tasks.py lint")
tasks.py:def uninstall(c, args=None) -> None:	tasks.py:    print("ran tasks.py uninstall")