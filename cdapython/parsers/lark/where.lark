start: q 


q: bool_expression 

q_syntax_error_case: "and"| "or"| "not"| "from"| "in"| "like"| "is"
?expression_math: expression_product
               | expression_math "+" expression_product -> expression_add
               | expression_math "-" expression_product -> expression_sub
               | "CASE" (when_then)+ "ELSE" expression_math "END" -> case_expression
               | "COALESCE" "(" [(expression_math ",")*] expression_math ")" -> coalesce_expression
               | function [(expression_math ",")*] expression_math ")"

?expression_product: expression_parens
                  | expression_product "*" expression_parens -> expression_mul
                  | expression_product "/" expression_parens -> expression_div

?expression_parens: expression
                  | "(" expression_parens "*" expression_parens ")" -> expression_mul
                  | "(" expression_parens "/" expression_parens ")" -> expression_div
                  | "(" expression_parens "+" expression_parens ")" -> expression_add
                  | "(" expression_parens "-" expression_parens ")" -> expression_sub

?expression: name -> column_name
            | literal | null


bool_expression: bool_parentheses
                 | bool_expression "AND" bool_parentheses -> bool_and
                 | bool_expression "OR" bool_parentheses -> bool_or
                 | bool_expression "FROM" bool_parentheses -> from_expr
                 
bool_parentheses: comparison_type
                 | "(" bool_expression "AND" comparison_type ")" -> bool_and
                 | "(" bool_expression "OR" comparison_type ")" -> bool_or
comparison_type: equals | not_equals | greater_than | less_than | greater_than_or_equal
| less_than_or_equal | between | in_expr | not_in_expr | is | is_not | not | like 



array: "[" [expression_math ","]* expression_math "]"
null: "null"i 
not: "NOT" comparison_type -> not_op
like: expression "LIKE" expression -> like_expr
equals: expression_math "=" expression_math
is: expression_math "IS" expression_math  -> is_op
is_not: expression_math "is" "not" expression_math
not_equals: expression_math ("<>" | "!=") expression_math
greater_than: expression_math ">" expression_math
less_than: expression_math "<" expression_math
greater_than_or_equal: expression_math ">=" expression_math
less_than_or_equal: expression_math "<=" expression_math
between: expression_math "BETWEEN" expression_math "AND" expression_math
in_expr: expression_math ("IN" "(" [expression_math ","]* expression_math ")" | "IN" array)
not_in_expr: expression_math "NOT" "IN" "(" [expression_math ","]* expression_math ")"
?literal: boolean -> bool
       | number_expr -> number
       | /'([^']|\s)+'|''/ -> string
       | /"([^"]|\s)+"|""/ -> string
       | timestamp_expression -> timestamp_expression
boolean: "true" -> true
       | "false" -> false
?number_expr: product 

?product: NUMBER | "-" product -> neg 





alias: name -> alias_string
timestamp_expression: "NOW" "(" ")" -> datetime_now
                    | "TODAY" "(" ")" -> date_today
                    | "TIMESTAMP" "(" "'" date "'" "," "'" time "'" ")" -> custom_timestamp



when_then: "WHEN" bool_expression "THEN" expression_math

date: YEAR "-" MONTH "-" DAY
YEAR: /[0-9]{4}/
MONTH: /[0-9]{2}/
DAY: /[0-9]{2}/
time: HOURS ":" MINUTES ":" SECONDS
HOURS: /[0-9]{2}/
MINUTES: /[0-9]{2}/
SECONDS: /[0-9]{2}/

name: CNAME | WORD

function: "replace""(" -> replace | "count""(" -> count

%import common.ESCAPED_STRING
%import common.CNAME
%import common.DIGIT
%import common.SIGNED_NUMBER
%import common.NUMBER
%import common.FLOAT
%import common.LETTER
%import common.WORD
%import common.WS
%import common.NEWLINE
%ignore WS
COMMENT: "//" /[^\n]/* | "/*" /(\S|\s)*?/ "*/"
%ignore COMMENT

