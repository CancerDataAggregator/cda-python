start: q 


q: bool_expression 

?expression_math: expression_product
               | expression_math "+" expression_product -> expression_add
               | expression_math "-" expression_product -> expression_sub
               | "CASE"i (when_then)+ "ELSE"i expression_math "END" -> case_expression
               | "COALESCE"i "(" [(expression_math ",")*] expression_math ")" -> coalesce_expression
               | function [(expression_math ",")*] expression_math ")"

?expression_product: expression_parens
                  | expression_product "*" expression_parens -> expression_mul
                  | expression_product "/" expression_parens -> expression_div

?expression_parens: expression
                  | "(" expression_parens "*" expression ")" -> expression_mul
                  | "(" expression_parens "/" expression ")" -> expression_div
                  | "(" expression_parens "+" expression ")" -> expression_add
                  | "(" expression_parens "-" expression ")" -> expression_sub

?expression: name -> column_name
            | literal


bool_expression: bool_parentheses
                 | bool_expression "AND"i bool_parentheses -> bool_and
                 | bool_expression "OR"i bool_parentheses -> bool_or
                 | bool_expression "FROM"i bool_expression -> from_expr
                 
bool_parentheses: comparison_type
                 | "(" bool_expression "AND"i comparison_type ")" -> bool_and
                 | "(" bool_expression "OR"i comparison_type ")" -> bool_or
comparison_type: equals | not_equals | greater_than | less_than | greater_than_or_equal
| less_than_or_equal | between | in_expr | not_in_expr | is_null | is_not_null | not 


not: "NOT"i comparison_type
equals: expression_math "=" expression_math
is_null: expression_math "is"i "null"i
is_not_null: expression_math "is"i "not"i "null"i
not_equals: expression_math ("<>" | "!=") expression_math
greater_than: expression_math ">" expression_math
less_than: expression_math "<" expression_math
greater_than_or_equal: expression_math ">=" expression_math
less_than_or_equal: expression_math "<=" expression_math
between: expression_math "BETWEEN"i expression_math "AND"i expression_math
in_expr: expression_math "IN"i "(" [expression_math ","]* expression_math ")"
not_in_expr: expression_math "NOT"i "IN"i "(" [expression_math ","]* expression_math ")"
?literal: boolean -> bool
       | number_expr -> number
       | /'([^']|\s)+'|''/ -> string
       | /"([^"]|\s)+"|""/ -> string
       | timestamp_expression -> timestamp_expression
boolean: "true"i -> true
       | "false"i -> false
?number_expr: product

?product: NUMBER

alias: name -> alias_string
timestamp_expression: "NOW"i "(" ")" -> datetime_now
                    | "TODAY"i "(" ")" -> date_today
                    | "TIMESTAMP"i "(" "'" date "'" "," "'" time "'" ")" -> custom_timestamp



when_then: "WHEN"i bool_expression "THEN"i expression_math

date: YEAR "-" MONTH "-" DAY
YEAR: /[0-9]{4}/
MONTH: /[0-9]{2}/
DAY: /[0-9]{2}/
time: HOURS ":" MINUTES ":" SECONDS
HOURS: /[0-9]{2}/
MINUTES: /[0-9]{2}/
SECONDS: /[0-9]{2}/

name: CNAME | WORD

function: "replace"i"(" -> replace | "count"i"(" -> count

%import common.ESCAPED_STRING
%import common.CNAME
%import common.DIGIT
%import common.SIGNED_NUMBER
%import common.NUMBER
%import common.FLOAT
%import common.LETTER
%import common.WORD
%import common.WS
%import common.NEWLINE
%ignore WS
COMMENT: "//" /[^\n]/* | "/*" /(\S|\s)*?/ "*/"
%ignore COMMENT

